function [output] = pooling_layer_forward(input, layer)
% max pooling
    h_in = input.height;
    w_in = input.width;
    c = input.channel;
    batch_size = input.batch_size;
    k = layer.k;
    pad = layer.pad;
    stride = layer.stride;
    
    h_out = (h_in + 2*pad - k) / stride + 1;
    w_out = (w_in + 2*pad - k) / stride + 1;
    
    
    output.height = h_out;
    output.width = w_out;
    output.channel = c;
    output.batch_size = batch_size;

    % Replace the following line with your implementation.
    output.data = zeros([h_out, w_out, c, batch_size]);
    for b = 1:batch_size
        data = input.data(:,b);
        data = reshape(data, h_in,w_in);
        data = padarray(data, [pad,pad],0);
        %[h,w] = size(data);
        
        layer1 = data(1:end, 1:end);
        layer2 = data(1:end, 2:end);
        layer3 = data(2:end, 1:end);
        layer4 = data(2:end, 2:end);
        
        
        
        % the number of elements in kernel
        elements = k*k;
        
        for i = 1:k
            for 
            
        end
        
    end

end

